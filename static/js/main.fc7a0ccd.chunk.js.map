{"version":3,"sources":["components/Preview/index.js","components/Message/index.js","components/Notes/NotesContainer.js","components/Notes/NotsList.js","components/Notes/Note.js","components/Notes/NoteForm.js","components/Alert/index.js","App.js","index.js"],"names":["Preview","props","className","children","Message","title","NotesContainer","NotesList","Note","noteClicked","active","onClick","NoteForm","formTitle","content","titleChanged","contentChanged","submitClicked","submitText","type","name","placeholder","value","onChange","rows","href","Alert","validationMessages","map","message","index","App","useState","notes","setNotes","setTitle","setContent","selectedNote","setSelectedNote","creating","setCreating","editing","setEditing","validationErrors","setValidationErrors","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","saveToLocalStorage","key","length","setTimeout","validate","passed","push","changeTitleHandler","event","target","changeContetnHandler","saveNoteHandler","note","id","Date","updatedNotes","editNoteHandler","find","updateNoteHandler","findIndex","deleteNoteHandler","noteIndex","splice","noteId","noteDisplay","getPreview","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc7a0ccd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Preview = (props) => (\r\n    <div className=\"preview-section\">\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\nexport default Preview;","import React from \"react\";\r\n\r\nconst Message = (props) => (\r\n    <h2 className=\"center\">\r\n        {props.title}\r\n    </h2>\r\n);\r\n\r\nexport default Message;","import React from \"react\";\r\n\r\nconst NotesContainer = (props) => (\r\n    <div className=\"notes-section\">\r\n        {props.children}\r\n    </div>\r\n)\r\n\r\nexport default NotesContainer; ","import React from \"react\";\r\n\r\nconst NotesList = (props) => (\r\n    <ul className=\"notes-list\">\r\n        {props.children}\r\n    </ul>\r\n)\r\n\r\nexport default NotesList; ","import React from \"react\";\r\n\r\nconst Note = (props) => {\r\n    const { title, noteClicked, active } = props;\r\n    return(\r\n        <li className={`note-item ${active && 'active'}`} onClick={noteClicked}>{title}</li>\r\n    )  \r\n}\r\n\r\nexport default Note; ","import React from \"react\";\r\n\r\nconst NoteForm = (props) => {\r\n    const { formTitle, title, content, titleChanged, contentChanged, submitClicked, submitText } = props;\r\n\r\n    return (\r\n        <div>\r\n            <h2>{formTitle}</h2>\r\n            <div>\r\n                <input\r\n                    type = 'text'\r\n                    name = 'title'\r\n                    className = 'form-input mb-30'\r\n                    placeholder = 'Title'\r\n                    value = {title}\r\n                    onChange = {titleChanged}\r\n                />\r\n\r\n                <textarea\r\n                    rows='10'\r\n                    name='content'\r\n                    className='form-input'\r\n                    placeholder='text'\r\n                    value={content}\r\n                    onChange={contentChanged}\r\n                />\r\n\r\n                <a href='#' className='button green' onClick={submitClicked}>{submitText}</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoteForm;","import React from \"react\";\r\n\r\nconst Alert = (props) => (\r\n    <div className='alert-container'>\r\n        <ul>\r\n            {props.validationMessages.map((message, index) => <li key={index}>{message}</li>)}\r\n        </ul>\r\n    </div>\r\n);\r\n\r\nexport default Alert;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Preview from './components/Preview';\nimport Message from './components/Message';\nimport NotesContainer from './components/Notes/NotesContainer';\nimport NotesList from './components/Notes/NotsList';\nimport Note from './components/Notes/Note';\nimport NoteForm from './components/Notes/NoteForm';\nimport Alert from './components/Alert';\n\nfunction App() {\n\n  const [notes, setNotes] = useState([]);\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [creating, setCreating] = useState(false);\n  const [editing, setEditing] = useState(false);\n  const [validationErrors, setValidationErrors] = useState([]);\n\n  useEffect( () => {\n    if (localStorage.getItem('notes')){\n      setNotes(JSON.parse(localStorage.getItem('notes')));\n    } else {\n      localStorage.setItem('notes', JSON.stringify([]));\n    }\n  }, []);\n\n  const saveToLocalStorage = (key, value) => {\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  useEffect(() => {\n    if (validationErrors.length !==0) {\n      setTimeout(() => {\n        setValidationErrors([]);\n      }, 3000)\n    }\n  }, [validationErrors])\n\n  //Validation\n  const validate = () => {\n    const validationErrors = [];\n    let passed = true;\n    if(!title){\n      validationErrors.push('Please insert a Title for your note!');\n      passed = false;\n    }\n\n    if(!content){\n      validationErrors.push('You can not save an empty note!');\n      passed = false;\n    }\n\n    setValidationErrors(validationErrors);\n    return passed;\n  }\n\n  //change note Title\n  const changeTitleHandler = (event) => {\n    setTitle(event.target.value);\n  }\n\n  //change note contetn\n  const changeContetnHandler = (event) => {\n    setContent(event.target.value);\n  }\n\n  //save new Note\n  const saveNoteHandler = () =>{\n    \n    if(!validate()) return;\n\n    const note = {\n      id: new Date(),\n      title: title,\n      content: content\n    }\n\n    const updatedNotes = [...notes, note];\n\n    saveToLocalStorage('notes', updatedNotes);\n    setNotes(updatedNotes);\n    setCreating(false);\n    setSelectedNote(note.id);\n    setTitle('');\n    setContent('');\n  }\n\n\n  //Selecting note\n  const selectNoteHandler = noteId => {\n    setSelectedNote(noteId);\n    setCreating(false);\n    setEditing(false);\n  }\n\n  //edite note\n  const editNoteHandler = () =>{\n    const note = notes.find(note => note.id === selectedNote);\n    setEditing(true);\n    setTitle(note.title);\n    setContent(note.content); \n  }\n\n  //update a note\n  const updateNoteHandler = () =>{\n    if(!validate()) return;\n    const updatedNotes = [...notes];\n    const noteIndex = notes.findIndex(note => note.id === selectedNote);\n    updatedNotes[noteIndex] = {\n      id: selectedNote,\n      title: title,\n      content: content\n    };\n\n    saveToLocalStorage('notes', updatedNotes);\n    setNotes(updatedNotes);\n    setEditing(false);\n    setTitle('');\n    setContent(''); \n  }\n  //adding new note\n  const addNoteHandler = () => {\n    setCreating(true);\n    setEditing(false);\n    setTitle('');\n    setContent(''); \n  }\n\n  //delete note \n  const deleteNoteHandler = () => {\n    const updatedNotes = [...notes];\n    const noteIndex = updatedNotes.findIndex(note => note.id === selectedNote);\n    notes.splice(noteIndex, 1);\n    saveToLocalStorage('notes', notes);\n    setNotes(notes);\n    setSelectedNote(null);\n  }\n  const getAddNote = () => {\n    return (\n     <NoteForm\n        formTitle=\"new note\"\n        title = {title}\n        content = {content}\n        titleChanged = {changeTitleHandler}\n        contentChanged = {changeContetnHandler}\n        submitText = \"Save\"\n        submitClicked = {saveNoteHandler}\n     />\n    );\n  };\n\n  const getPreview = () => {\n\n    if (notes.length === 0) {\n      return <Message title=\"There are no notes yet!\" />\n    }\n\n    if (!selectedNote) {\n      return <Message title=\"Please select a note!\" />\n    }\n\n    const note = notes.find(note => {\n      return note.id === selectedNote;\n    });\n\n    let noteDisplay = (\n      <div> \n        <h2>{note.title}</h2>\n        <p>{note.content}</p>\n      </div>\n    )\n\n    if(editing){\n      noteDisplay = (\n        <NoteForm\n          formTitle=\"edit note\"\n          title = {title}\n          content = {content}\n          titleChanged = {changeTitleHandler}\n          contentChanged = {changeContetnHandler}\n          submitText = \"Edit\"\n          submitClicked = {updateNoteHandler}\n        />\n      );\n    }\n\n    return (\n      <div>\n        {!editing &&\n          <div className=\"note-operations\">\n            <a href=\"#\" onClick={editNoteHandler}>\n              <i className=\"fa fa-pencil-alt\" />\n            </a>\n            <a href=\"#\" onClick={deleteNoteHandler}>\n              <i className=\"fa fa-trash\" />\n            </a>\n          </div>\n        }\n\n      {noteDisplay}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <NotesContainer>\n        <NotesList>\n          {notes.map(note =>\n            <Note\n             key={note.id}\n             title={note.title}\n             noteClicked={() => selectNoteHandler(note.id)}\n             active ={selectedNote === note.id}\n             />\n          )}\n        </NotesList>\n        <button className=\"add-btn\" onClick={addNoteHandler}>+</button>\n      </NotesContainer>\n      <Preview>  \n        {creating ?  getAddNote() : getPreview()}\n      </Preview> \n      {validationErrors.length !== 0 && <Alert validationMessages={validationErrors} />}\n    </div>\n  );\n}\n\nexport default App;\n","import './index.css';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}